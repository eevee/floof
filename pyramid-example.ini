### Pyramid configuration for floof
# currently a mishmash of dev/prod settings, with apologies

[app:floof]
use = egg:floof#pyramid

## General configuration
default_locale_name = en

mako.directories = floof:templates
sqlalchemy.url = sqlite:///%(here)s/floof.db

###cache_dir = %(here)s/data
###cache.data_dir = %(here)s/data/cache
session.type = file
session.data_dir = %(here)s/data/sessions/data
session.lock_dir = %(here)s/data/sessions/lock
session.key = floof
session.secret = somesecret

###full_stack = true
###static_files = true

## Debugging
reload_templates = true
debug_authorization = false
debug_notfound = false
debug_routematch = false
debug_templates = false

## floof-specific
site_title = floof

#filestore = local
#filestore.directory = %(here)s/floof/public/files

filestore = mogilefs
filestore.trackers = localhost:7001
filestore.domain = floof

thumbnail_size = 160

rating_radius = 1

super_debug = true

# Force a logout after an inactivity period of this many seconds.
inactivity_expiry = 1800

# Enable client certificate authentication for users.
# This may be dangerous if you don't understand the particulars, but
# the UI presently assumes that it is always "true".
# See: http://bugs.veekun.com/projects/floof/wiki/Client_Certificates
client_cert_auth = true

# Determines where to look for the client certificate serial passed from the
# frontend HTTPS server.
# May be: 'http_headers'
client_cert_transport = http_headers

# Required in a 'X-Floof-Secret' HTTP header for certificate authentication
# via HTTP headers to work.
# During normal operation, this provides no actual security benefit, but
# it provides some fallback securty should access to the raw HTTP application
# accidently become publically attainable.
client_cert_http_secret = lalala

# Where to generate and keep the CA and CRL for SSL client certificate
# authentication.
client_cert_dir = %(here)s/certs


### Pipeline

[pipeline:main]
# Change weberror_prod to weberror_dev for in-browser stack traces
pipeline =
    weberror_prod
    tm
    floof

[filter:weberror_dev]
use = egg:WebError#evalerror

[filter:weberror_prod]
use = egg:WebError#error_catcher
debug = false
;error_log = 
;show_exceptions_in_wsgi_errors = true
;smtp_server = localhost
;error_email = janitor@example.com
;smtp_username = janitor
;smtp_password = "janitor's password"
;from_address = paste@localhost
;error_subject_prefix = "Pyramid Error"
;smtp_use_tls =
;error_message =

[filter:tm]
use = egg:repoze.tm2#tm
commit_veto = repoze.tm:default_commit_veto

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 6543


### Logging

[loggers]
keys = root, floof, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console

[logger_floof]
level = WARN
handlers =
qualname = floof

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s
